=for comment POD_DERIVED_INDEX_GENERATED
The following documentation is automatically generated.  Please do not edit
this file, but rather the original, inline with Net::Async::UWSGI::Server::Connection
at lib/Net/Async/UWSGI/Server/Connection.pm
(on the system that originally ran this).
If you do edit this file, and don't want your changes to be removed, make
sure you change the first line.

=encoding utf8

=cut

=head1 NAME

Net::Async::UWSGI::Server::Connection - represents an incoming connection to a server

=head1 VERSION

Version 0.002

=head1 DESCRIPTION

=head2 CONTENT_TYPE_HANDLER

=head1 METHODS

=head2 configure

Applies configuration parameters.

=over 4

=item * bus - the event bus

=item * on_request - callback when we get an incoming request

=back

=head2 json

Accessor for the current JSON state

=head2 on_read

Base read handler for incoming traffic.

Attempts to delegate to L</dispatch_request> as soon as we get the UWSGI
frame.

=head2 cancel

Cancels any request in progress.

If there's still a connection to the client,
they'll receive a 500 response.

It's far more likely that the client has gone
away, in which case there's no response to send.

=head2 env

Accessor for the UWSGI environment.

=head2 response

Resolves when the response is complete.

=head2 dispatch_request

At this point we have a request including headers,
and we should know whether there's a body involved
somewhere.

=head2 has_body

Returns true if we're expecting a request body
for the current request method.

=head2 read_chunked

Read handler for chunked data. Unlikely to be used by any real implementations.

=head2 on_trailing_header

Deal with trailing headers. Not yet implemented.

=head2 read_to_length

Read up to the expected fixed length of data.

=head2 request_body

Accessor for the request body, available to the L</finish_request> callback.

=head1 INHERITED METHODS

=over 4

=item L<IO::Async::Stream>

L<close|IO::Async::Stream/close>, L<close_now|IO::Async::Stream/close_now>, L<close_when_empty|IO::Async::Stream/close_when_empty>, L<connect|IO::Async::Stream/connect>, L<is_read_eof|IO::Async::Stream/is_read_eof>, L<is_write_eof|IO::Async::Stream/is_write_eof>, L<new_for_stdin|IO::Async::Stream/new_for_stdin>, L<new_for_stdio|IO::Async::Stream/new_for_stdio>, L<new_for_stdout|IO::Async::Stream/new_for_stdout>, L<on_read_high_watermark|IO::Async::Stream/on_read_high_watermark>, L<on_read_low_watermark|IO::Async::Stream/on_read_low_watermark>, L<on_read_ready|IO::Async::Stream/on_read_ready>, L<on_write_ready|IO::Async::Stream/on_write_ready>, L<push_on_read|IO::Async::Stream/push_on_read>, L<read_atmost|IO::Async::Stream/read_atmost>, L<read_exactly|IO::Async::Stream/read_exactly>, L<read_until|IO::Async::Stream/read_until>, L<read_until_eof|IO::Async::Stream/read_until_eof>, L<want_readready_for_read|IO::Async::Stream/want_readready_for_read>, L<want_readready_for_write|IO::Async::Stream/want_readready_for_write>, L<want_writeready_for_read|IO::Async::Stream/want_writeready_for_read>, L<want_writeready_for_write|IO::Async::Stream/want_writeready_for_write>, L<write|IO::Async::Stream/write>

=item L<IO::Async::Handle>

L<bind|IO::Async::Handle/bind>, L<close_read|IO::Async::Handle/close_read>, L<close_write|IO::Async::Handle/close_write>, L<new_close_future|IO::Async::Handle/new_close_future>, L<notifier_name|IO::Async::Handle/notifier_name>, L<read_fileno|IO::Async::Handle/read_fileno>, L<read_handle|IO::Async::Handle/read_handle>, L<set_handle|IO::Async::Handle/set_handle>, L<set_handles|IO::Async::Handle/set_handles>, L<socket|IO::Async::Handle/socket>, L<want_readready|IO::Async::Handle/want_readready>, L<want_writeready|IO::Async::Handle/want_writeready>, L<write_fileno|IO::Async::Handle/write_fileno>, L<write_handle|IO::Async::Handle/write_handle>

=item L<IO::Async::Notifier>

L<add_child|IO::Async::Notifier/add_child>, L<adopt_future|IO::Async::Notifier/adopt_future>, L<can_event|IO::Async::Notifier/can_event>, L<children|IO::Async::Notifier/children>, L<configure_unknown|IO::Async::Notifier/configure_unknown>, L<debug_printf|IO::Async::Notifier/debug_printf>, L<get_loop|IO::Async::Notifier/get_loop>, L<invoke_error|IO::Async::Notifier/invoke_error>, L<invoke_event|IO::Async::Notifier/invoke_event>, L<loop|IO::Async::Notifier/loop>, L<make_event_cb|IO::Async::Notifier/make_event_cb>, L<maybe_invoke_event|IO::Async::Notifier/maybe_invoke_event>, L<maybe_make_event_cb|IO::Async::Notifier/maybe_make_event_cb>, L<new|IO::Async::Notifier/new>, L<parent|IO::Async::Notifier/parent>, L<remove_child|IO::Async::Notifier/remove_child>, L<remove_from_parent|IO::Async::Notifier/remove_from_parent>

=back

=head1 AUTHOR

Tom Molesworth <cpan@perlsite.co.uk>

=head1 LICENSE

Copyright Tom Molesworth 2013-2014. Licensed under the same terms as Perl itself.
